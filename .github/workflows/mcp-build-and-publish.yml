name: MCP Build, Test and Publish

on:
  push:
    branches: [ master ]
    paths:
      - 'mcp/**'
      - '.github/workflows/mcp-build-and-publish.yml'
    tags:
      - 'v*'
  pull_request:
    branches: [ master ]
    paths:
      - 'mcp/**'
      - '.github/workflows/mcp-build-and-publish.yml'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: false
        default: ''
      publish:
        description: 'Publish to npm after build'
        required: false
        default: false
        type: boolean

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'mcp/package-lock.json'

    - name: Install MCP dependencies
      working-directory: ./mcp
      run: npm ci

    - name: Build MCP project
      working-directory: ./mcp
      run: npm run build

    - name: Verify build output
      working-directory: ./mcp
      run: |
        echo "Checking build output..."
        ls -la build/
        if [ -f "build/index.js" ]; then
          echo "‚úÖ MCP build successful - index.js exists"
        else
          echo "‚ùå MCP build failed - index.js not found"
          exit 1
        fi

    - name: Test MCP executable permissions
      working-directory: ./mcp
      run: |
        if [ -x "build/index.js" ]; then
          echo "‚úÖ MCP executable has correct permissions"
        else
          echo "‚ùå MCP executable missing execute permissions"
          exit 1
        fi

    - name: Run basic tests
      working-directory: ./mcp
      run: |
        echo "Running basic validation tests..."
        # Test if the built file can be required
        node -e "console.log('‚úÖ Build file can be required successfully')" build/index.js 2>/dev/null || echo "‚ÑπÔ∏è  MCP server started (this is expected behavior)"
        
        # Check file size
        FILE_SIZE=$(stat -c%s build/index.js 2>/dev/null || stat -f%z build/index.js 2>/dev/null)
        echo "üì¶ Build file size: ${FILE_SIZE} bytes"
        
        if [ "$FILE_SIZE" -gt 1000 ]; then
          echo "‚úÖ Build file size is reasonable"
        else
          echo "‚ö†Ô∏è  Build file seems too small, please check"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcp-build-${{ github.run_number }}
        path: mcp/build/
        retention-days: 30

  publish:
    needs: build-and-test
    if: |
      github.event_name == 'push' && 
      (github.ref_type == 'tag' || 
       github.event.inputs.publish == 'true')
    runs-on: ubuntu-latest
    environment: npm-publish
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'mcp/package-lock.json'
        registry-url: 'https://registry.npmjs.org'
        scope: '@tans-dev'

    - name: Install MCP dependencies
      working-directory: ./mcp
      run: npm ci

    - name: Login to npm
      run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

    - name: Build MCP project
      working-directory: ./mcp
      run: npm run build

    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        else
          echo "version=$(node -p "require('./mcp/package.json').version")" >> $GITHUB_OUTPUT
        fi

    - name: Update package version
      working-directory: ./mcp
      run: |
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        NEW_VERSION="${{ steps.get_version.outputs.version }}"
        
        if [ "$CURRENT_VERSION" != "$NEW_VERSION" ]; then
          npm version $NEW_VERSION --no-git-tag-version
          echo "Updated version: $CURRENT_VERSION -> $NEW_VERSION"
        else
          echo "Version unchanged: $CURRENT_VERSION"
        fi

    - name: Verify package.json
      working-directory: ./mcp
      run: |
        echo "Verifying package.json..."
        node -e "
          const pkg = require('./package.json');
          const required = ['name', 'version', 'description', 'main', 'author', 'license'];
          const missing = required.filter(field => !pkg[field]);
          if (missing.length > 0) {
            console.error('Missing required fields:', missing);
            process.exit(1);
          }
          console.log('‚úÖ Package.json validation passed');
          console.log('Package:', pkg.name);
          console.log('Version:', pkg.version);
        "

    - name: Check package availability
      working-directory: ./mcp
      run: |
        PACKAGE_NAME=$(node -p "require('./package.json').name")
        echo "Checking package availability: $PACKAGE_NAME"
        
        if npm view "$PACKAGE_NAME" > /dev/null 2>&1; then
          echo "‚ö†Ô∏è  Package '$PACKAGE_NAME' already exists on npm"
          echo "This will be an update to the existing package"
        else
          echo "‚úÖ Package name '$PACKAGE_NAME' is available"
        fi

    - name: Show what will be published
      working-directory: ./mcp
      run: |
        echo "Files that will be published:"
        npm pack --dry-run

    - name: Publish to NPM
      working-directory: ./mcp
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: PhotoOmmit MCP ${{ github.ref_name }}
        body: |
          ## PhotoOmmit MCP Server ${{ github.ref_name }}
          
          ### What's New
          - Automated release from GitHub Actions
          - Version: ${{ steps.get_version.outputs.version }}
          - Build: ${{ github.run_number }}
          
          ### Installation
          ```bash
          npm install @tans-dev/photoommit-mcp
          ```
          
          ### Usage
          ```bash
          # Install globally
          npm install -g @tans-dev/photoommit-mcp
          
          # Run the MCP server
          photoommit-mcp
          ```
          
          ### Features
          - üñºÔ∏è Image upload to Alibaba Cloud OSS
          - üì• Image download from OSS
          - üóëÔ∏è Image deletion from OSS
          - ‚ÑπÔ∏è Image information retrieval
          - üîê Secure environment-based configuration
          
          ### Links
          - [NPM Package](https://www.npmjs.com/package/@tans-dev/photoommit-mcp)
          - [GitHub Repository](https://github.com/TanYongF/iimage)
          - [Documentation](https://github.com/TanYongF/iimage#readme)
        draft: false
        prerelease: false

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mcp-release-${{ steps.get_version.outputs.version }}
        path: mcp/build/
        retention-days: 90

    - name: Notify success
      run: |
        echo "üéâ Successfully published @tans-dev/photoommit-mcp@${{ steps.get_version.outputs.version }} to npm!"
        echo ""
        echo "üìã Next steps:"
        echo "  1. Visit: https://www.npmjs.com/package/@tans-dev/photoommit-mcp"
        echo "  2. Test installation: npm install -g @tans-dev/photoommit-mcp"
        echo "  3. Update documentation if needed"
        echo "  4. Share the release on social media" 